fastlane_version "2.97.0"

project_name = "Wundershine"
scheme = project_name
path = "ios/#{project_name}.xcodeproj"

platform :ios do

  # iOS Lanes

  desc "Fetch certificates and provisioning profiles"
  lane :certificates do
    match(app_identifier: "com.wundershine.app", type: "development", readonly: true)
    match(app_identifier: "com.wundershine.app", type: "appstore", readonly: true)
    match(app_identifier: "com.wundershine.app.ShareReceiver", type: "development", readonly: true)
    match(app_identifier: "com.wundershine.app.ShareReceiver", type: "appstore", readonly: true)
  end

  desc "Push to GitHub"
  lane :push_to_github do |options|
    version = get_version_number(
      xcodeproj: path,
      target: project_name
    )
    build = get_build_number(
      xcodeproj: path
    )
    sh "git checkout master"
    git_pull
    commit_version_bump(
      force: true,
      xcodeproj: path,
      message: "Version #{version} (build #{build}) [#{options[:ci]}-ios]"
    )
    add_git_tag(
      tag: "v#{version}-#{build}-ios"
    )
    push_to_git_remote(
      remote_branch: "master",
      tags: true,
      force: true
    )
  end

  desc "Build the iOS application"
  lane :build do
    certificates
    increment_build_number(xcodeproj: path)
    gym(
      scheme: "Wundershine",
      workspace: "./ios/Wundershine.xcworkspace"
    )
  end

  desc "Ship to Testflight"
  lane :beta do
    build
    pilot
    push_to_github(ci: "bitrise")
  end

end

platform :android do

  # Android Lanes

  desc "Push to GitHub"
  lane :push_to_github do |options|
    version = android_get_version_name(
      gradle_file: "android/app/build.gradle"
    )
    build = android_get_version_code(
      gradle_file: "android/app/build.gradle"
    )
    sh "git checkout master"
    git_pull
    git_commit(
      path: "android/app/build.gradle",
      message: "Version #{version} (build #{build}) [#{options[:ci]}-android]"
    )
    add_git_tag(
      tag: "v#{version}-#{build}-android"
    )
    push_to_git_remote(
      remote_branch: "master",
      tags: true,
      force: true
    )
  end

  desc "Build the Android application"
  private_lane :build do
    android_set_version_code(
      gradle_file: "android/app/build.gradle"
    )
    gradle(task: "clean", project_dir: "android/")
    gradle(task: "assemble", build_type: "Release", project_dir: "android/")
  end

  desc "Ship to Playstore Internal"
  lane :beta do
    build
    supply(
      package_name: "com.wundershine.app",
      track: "beta",
      track_promote_to: "beta"
    )
    push_to_github(ci: "bitrise")
  end

end